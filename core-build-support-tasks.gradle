import org.ajoberstar.grgit.*

/**
 * Load the properties found at the provided path into the root project, making them accessible via "rootProject.getProperty('foo')".
 * Also adds the properties to the global 'ant' object.
 * @param path
 * @return
 */
def loadProps(String path) {
    File f = file(path);
    if(!f.exists()) {
        throw new Exception("Could not load properties from ${path}, as it does not exist")
    }
    Properties props = new Properties()
    props.load(new FileInputStream(f))
    logger.info("Loading Properties from ${path} into 'rootProject[*]' and 'ant[*]'.")
    props.each { k, v ->
        logger.info("\t${k}: ${v}");
        rootProject.ext.set(k, v)
    }
}

/**
 * Load props from the build.properties file in source control.
 */
loadProps("${rootProject.projectDir}/src/com/liferay/portal/util/build.properties")
loadProps("${rootProject.projectDir}/build.properties")


def initProps() {
    def status = Grgit.open(rootProject.projectDir).log(maxCommits: 1)[0]
    rootProject.ext.set('dotcms.release.build', status.abbreviatedId)
    rootProject.ext.set('dotcms.release.date', new Date((long) (status.time * 1000L)).format('MMM dd, yyyy'))

    rootProject.ext.set('plugin.root.dir.default', "${rootProject.projectDir}/dotCMS")
    rootProject.ext.set('java.version', System.getProperty('java.version'))
    rootProject.ext.set('java.runtime.version', System.getProperty('java.runtime.version'))
    rootProject.ext.set('java.specification.vendor', System.getProperty('java.specification.vendor'))

//    System.properties.each { k,v -> println k + ': ' + v }

}

initProps()

/**
 * Clone the tomcat repo into $tomcat.home if the directory does not exist.
 */
task cloneTomcat() {
    onlyIf {
        return !file("${project.'tomcat.home'}/").exists()
    }
    doLast {
        Grgit.clone(uri: 'https://github.com/dotCMS/tomcat.git', refToCheckout: "${project.'tomcat.version'}", dir: "${project.'tomcat.home'}")
    }
}

/**
 * Update the tomcat git clone found at $tomcat.home
 */
task pullTomcat(dependsOn: cloneTomcat) {
    doLast {
        def grgit = Grgit.open(dir: "${project.'tomcat.home'}")
        grgit.pull()
        logger.info("Pulled tomcat: version '${project.'tomcat.version'}'")
    }
}

/**
 * Clone the JBoss repo into $tomcat.home if the directory does not exist.
 */
task cloneJboss7() {
    onlyIf {
        return !file("${project.'jboss7.home'}/").exists()
    }

    doLast {
        Grgit.clone(uri: 'https://github.com/dotCMS/jboss7.git', refToCheckout: "${project.'jboss7.version'}", dir: "${project.'jboss7.home'}")
    }
}

/**
 * Update the tomcat git clone found at $tomcat.home
 */
task pullJboss7(dependsOn: cloneJboss7) {
    doLast {
        def grgit = Grgit.open(dir: "${project.'jboss7.home'}")
        grgit.pull()
        logger.info("Pulled jboss: version '${project.'jboss7.version'}'")
    }
}


task "setup-deploy-location"() {
    description "sets up the locations where to deploy"
    project.ext.'plugin.root.dir' = project.hasProperty('target.root') ? "${projectDir}/../../${project.'target.root'}" : "${project.'plugin.root.dir.default'}"
    project.ext.'plugin.jar.deploy.dir' = project.hasProperty('target.root') ? "${project.'target.root'}/WEB-INF/lib" : "${project.'plugin.root.dir.default'}/WEB-INF/lib"
    ant.properties.'plugin.root.dir' = project.ext.'plugin.root.dir'
    ant.properties.'plugin.jar.deploy.dir' = project.ext.'plugin.jar.deploy.dir'
    logger.info("Deploying plugins to: ${project.'plugin.root.dir'} | ${project.'plugin.jar.deploy.dir'}")
}

task distCleanBackup(type: Delete) {
    delete "${project.'tomcat.home'}/temp"
}

task backupCustomTomcatData(type: Copy, dependsOn: distCleanBackup) {
    into "${project.'tomcat.home'}/temp"
    into("assets") {
        from "${project.'tomcat.home'}/webapps/ROOT/assets"
    }
    into("dotsecure") {
        from "${project.'tomcat.home'}/webapps/ROOT/dotsecure"
    }
    into("META-INF") {
        from "${project.'tomcat.home'}/webapps/ROOT/META-INF"
    }
    into("WEB-INF/H2_DATABASE") {
        from "${project.'tomcat.home'}/webapps/ROOT/WEB-INF/H2_DATABASE"
        include '**/*.db'
    }
}

task restoreCustomTomcatData(type: Copy) {
    from "${project.'tomcat.home'}/temp"
    into "${project.'tomcat.home'}/webapps/ROOT"
}


task distCleanJsp(type: Delete) {
    description "Removes all compiled jsp files from the tomcat instance."
    delete files("${project.'tomcat.home'}/work/Catalina")
}

